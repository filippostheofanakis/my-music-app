{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\felip\\\\Desktop\\\\javascript projects\\\\my-music-app\\\\src\\\\components\\\\SongList.js\",\n  _s = $RefreshSig$();\n// SongList.js\nimport React, { useState, useEffect } from \"react\";\nimport \"./SongList.css\";\nimport chillHop from \"../data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SongList = ({\n  currentSongIndex,\n  handleSongSelect\n}) => {\n  _s();\n  const [songs, setSongs] = useState([]); // State to store the fetched songs\n\n  useEffect(() => {\n    // Fetch songs when the component mounts\n    fetch(\"http://localhost:5000/songs\") // Make a GET request to the backend\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json(); // Parse the response body as JSON\n    }).then(data => setSongs(data)) // Update the 'songs' state with the fetched data\n    .catch(error => console.error(\"Error fetching songs:\", error)); // Log any errors\n  }, []); // Empty dependency array ensures this effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"song-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"library-title\",\n      children: \"Library\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), songs.map((song, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `song-list-item ${index === currentSongIndex ? \"active\" : \"\"}`,\n      onClick: () => handleSongSelect(index),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: song.cover,\n        alt: song.name,\n        className: \"song-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"song-title\",\n          children: song.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"song-artist\",\n          children: song.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, song.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(SongList, \"VOyZriN/Fhf+BilZMpMEIr3tV0w=\");\n_c = SongList;\nexport default SongList;\nvar _c;\n$RefreshReg$(_c, \"SongList\");","map":{"version":3,"names":["React","useState","useEffect","chillHop","jsxDEV","_jsxDEV","SongList","currentSongIndex","handleSongSelect","_s","songs","setSongs","fetch","then","response","ok","Error","json","data","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","song","index","onClick","src","cover","alt","name","artist","id","_c","$RefreshReg$"],"sources":["C:/Users/felip/Desktop/javascript projects/my-music-app/src/components/SongList.js"],"sourcesContent":["// SongList.js\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./SongList.css\";\r\nimport chillHop from \"../data\";\r\n\r\nconst SongList = ({ currentSongIndex, handleSongSelect }) => {\r\n  const [songs, setSongs] = useState([]); // State to store the fetched songs\r\n\r\n  useEffect(() => {\r\n    // Fetch songs when the component mounts\r\n    fetch(\"http://localhost:5000/songs\") // Make a GET request to the backend\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return response.json(); // Parse the response body as JSON\r\n      })\r\n      .then((data) => setSongs(data)) // Update the 'songs' state with the fetched data\r\n      .catch((error) => console.error(\"Error fetching songs:\", error)); // Log any errors\r\n  }, []); // Empty dependency array ensures this effect runs only once on mount\r\n\r\n  return (\r\n    <div className=\"song-list\">\r\n      <h2 className=\"library-title\">Library</h2>\r\n\r\n      {songs.map((song, index) => (\r\n        <div\r\n          className={`song-list-item ${\r\n            index === currentSongIndex ? \"active\" : \"\"\r\n          }`}\r\n          key={song.id}\r\n          onClick={() => handleSongSelect(index)}\r\n        >\r\n          <img src={song.cover} alt={song.name} className=\"song-cover\" />\r\n          <div className=\"song-description\">\r\n            <h3 className=\"song-title\">{song.name}</h3>\r\n            <p className=\"song-artist\">{song.artist}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAO,gBAAgB;AACvB,OAAOC,QAAQ,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,gBAAgB;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExCC,SAAS,CAAC,MAAM;IACd;IACAU,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAAA,CAClCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAKP,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC;IAAA,CAC/BC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;EACtE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEf,OAAA;IAAKiB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBlB,OAAA;MAAIiB,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEzCjB,KAAK,CAACkB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBzB,OAAA;MACEiB,SAAS,EAAG,kBACVQ,KAAK,KAAKvB,gBAAgB,GAAG,QAAQ,GAAG,EACzC,EAAE;MAEHwB,OAAO,EAAEA,CAAA,KAAMvB,gBAAgB,CAACsB,KAAK,CAAE;MAAAP,QAAA,gBAEvClB,OAAA;QAAK2B,GAAG,EAAEH,IAAI,CAACI,KAAM;QAACC,GAAG,EAAEL,IAAI,CAACM,IAAK;QAACb,SAAS,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/DtB,OAAA;QAAKiB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BlB,OAAA;UAAIiB,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAEM,IAAI,CAACM;QAAI;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC3CtB,OAAA;UAAGiB,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAEM,IAAI,CAACO;QAAM;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA,GAPDE,IAAI,CAACQ,EAAE;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQT,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CArCIH,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAuCd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}